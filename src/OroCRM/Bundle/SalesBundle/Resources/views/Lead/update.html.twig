{% extends 'OroUIBundle:actions:update.html.twig' %}
{% form_theme form with ['OroAddressBundle:Include:fields.html.twig', 'OroFormBundle:Form:fields.html.twig'] %}

{% oro_title_set({params : {"%lead.name%": entity.name} }) %}
{% set audit_entity_class = 'OroCRM_Bundle_SalesBundle_Entity_Lead' %}
{% set title = form.vars.value.id ? entity.name ~ ' - ' ~ 'Update Lead'|trans : 'New Lead'|trans %}
{% set formAction = form.vars.value.id ? path('orocrm_sales_lead_update', { 'id': form.vars.value.id }) : path('orocrm_sales_lead_create')  %}

{% block head_script %}
    {{ parent() }}

    {% block stylesheets %}
        {{ form_stylesheet(form) }}
    {% endblock %}
{% endblock %}

{% block navButtons %}
    {% if form.vars.value.id and resource_granted('orocrm_sales_lead_delete') %}
        {{ UI.deleteButton({
            'dataUrl': path('oro_api_delete_lead', {'id': form.vars.value.id}),
            'dataRedirect': path('orocrm_sales_lead_index'),
            'aCss': 'no-hash remove-button',
            'id': 'btn-remove-lead',
            'dataId': form.vars.value.id,
            'dataMessage': 'Are you sure you want to delete this lead?',
            'title': 'Delete Lead',
            'label': 'Delete'
        })
        }}
        {{ UI.buttonSeparator() }}
    {% endif %}
    {{ UI.button({'path' : path('orocrm_sales_lead_index'), 'title' : 'Cancel', 'label' : 'Cancel'}) }}
    {{ UI.saveAndStayButton('orocrm_sales_lead_update') }}
    {{ UI.saveAndCloseButton() }}

    {% if resource_granted('orocrm_sales_lead_create')
        and resource_granted('oro_workflow')
        and form.vars.value.id is empty
    %}
        <div class="btn-group">
            <button type="button" class="btn btn-primary save-and-transit" data-workflow="sales_lead" data-transition="qualify">
                {% trans %}Save and Qualify{% endtrans %}
            </button>

            <script type="text/javascript">
                require(['jquery', 'oro/mediator', 'routing', 'oro/buttons-widget'],
                function($, mediator, routing, ButtonsWidget){
                    $('.save-and-transit').click(
                        function() {
                            var saveBtn = $(this);
                            // Modify form to stay on edit page after submit
                            var form = saveBtn.closest('form');
                            var actionInput = form.find('input[name="input_action"]');
                            actionInput.val('save_and_stay');
                            var formId = form.prop('id');

                            // On form submit response check for errors
                            mediator.once('hash_navigation_request:refresh', function (navigation) {
                                var content = $(navigation.selectorCached.container);
                                var hasErrors = content.find('.alert-error, .validation-error').length > 0;
                                if (!hasErrors) {
                                    var idRegexp = /(\d+)$/;
                                    var responseForm = content.find('#' + formId);
                                    var elementIdMatch = idRegexp.exec(responseForm.prop('action'));
                                    if (elementIdMatch.length) {
                                        // In case when no errors occurred load transitions for created entity
                                        var containerEl = $('<div class="hidden invisible"/>');
                                        $('body').append(containerEl);
                                        var transitionsWidget = new ButtonsWidget({
                                            'el': containerEl,
                                            'elementFirst': false,
                                            'url': routing.generate('oro_workflow_widget_buttons_entity', {
                                                'entityId': elementIdMatch[0],
                                                'entityClass': {{ oro_class_name(entity)|json_encode|raw }}
                                            })
                                        });
                                        transitionsWidget.on('renderComplete', function(el) {
                                            // Try to execute required transition
                                            var transition = el.find('#transition-' + saveBtn.data('workflow') + '-' + saveBtn.data('transition'));
                                            if (transition.length) {
                                                transition.on('transitionHandlerInitialized', function() {
                                                    transition.click();
                                                    containerEl.remove();
                                                });
                                            }
                                        });
                                        transitionsWidget.render();
                                    }
                                }
                            });
                            form.submit();
                        });
                    });
            </script>
        </div>
    {% endif %}
{% endblock %}

{% block pageHeader %}
    {% if form.vars.value.id %}
        {% set breadcrumbs = {
            'entity':      form.vars.value,
            'indexPath':   path('orocrm_sales_lead_index'),
            'indexLabel': 'Leads',
            'entityTitle': entity.name
        }
        %}
        {{ parent() }}
    {% else %}
        {% include 'OroUIBundle::page_title_block.html.twig' %}
    {% endif %}
{% endblock pageHeader %}

{% block breadcrumbs %}
    {{ parent() }}
    <div class="status-enabled pull-left">
        {% if entity.status.name != 'canceled' %}
            <div class="badge badge-enabled status-enabled"><i class="icon-status-enabled icon-circle"></i>{{ entity.status.label }}</div>
        {% else %}
            <div class="badge badge-disabled status-disabled"><i class="icon-status-disabled icon-circle"></i>{{ entity.status.label  }}</div>
        {% endif %}
    </div>
{% endblock breadcrumbs %}

{% block content_data %}
    {% set id = 'lead-profile' %}

    {% set dataBlocks = [{
            'title': 'General',
            'class': 'active',
            'subblocks': [
                {
                    'title': 'Lead Information',
                    'data': [
                        form_row(form.owner, {'label': 'Owner'}),
                        form_row(form.name, {'label': 'Lead Name'}),
                        form_row(form.namePrefix, {'label': 'Name prefix'}),
                        form_row(form.firstName, {'label': 'First name'}),
                        form_row(form.middleName, {'label': 'Middle name'}),
                        form_row(form.lastName, {'label': 'Last name'}),
                        form_row(form.nameSuffix, {'label': 'Name suffix'}),
                        form_row(form.contact, {'label': 'Contact'}),
                        form_row(form.jobTitle, {'label': 'Job Title'}),

                        form_row(form.phoneNumber, {'label': 'Phone Number'}),
                        form_row(form.email, {'label': 'Email'}),

                        form_row(form.account, {'label': 'Account'}),
                        form_row(form.companyName, {'label': 'Company Name'}),
                        form_row(form.website, {'label': 'Website'}),
                        form_row(form.numberOfEmployees, {'label': 'Number Of Employees'}),
                        form_row(form.industry, {'label': 'Industry'}),
                    ]
                },
                {
                    'title': 'Address',
                    'data': [
                        form_widget(form.address),
                    ]
                },
            ]
        }]
    %}

    {% if form.additional is defined and form.additional.children|length > 0 %}
        {% set additionalData = [] %}
        {% for value in form.additional %}
            {% set additionalData = additionalData|merge([form_row(value)]) %}
        {% endfor %}

        {% set dataBlocks = dataBlocks|merge([{
            'title': 'Additional',
            'subblocks': [{
                'title': '',
                'useSpan': false,
                'data' : additionalData
            }]
        }] ) %}
    {% endif %}

    {% set data =
        {
            'formErrors': form_errors(form)? form_errors(form) : null,
            'dataBlocks': dataBlocks,
        }
    %}
    {{ parent() }}
{% endblock content_data %}
