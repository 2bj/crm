reports:
    accounts:
        life_time_value:
            name:   "Account life time value"
            select:
                - a.name
                - SUM( o.closeRevenue ) as value
            from:
                - { table: OroCRMSalesBundle:Opportunity, alias: o }
            join:
                left:
                    - { join: o.account, alias: a }
                    - { join: o.status,  alias: s }
            where:
                and:
                    - s.name = 'won'

            groupBy:  a.id

        by_opportunities:
            name:     "Accounts by opportunities"
            from:
                - { table: OroCRMSalesBundle:Opportunity, alias: o }
            select:
                - a.id
                - a.name
                - SUM( (CASE WHEN (s.name='won') THEN 1 ELSE 0 END) ) as wonCount
                - SUM( (CASE WHEN (s.name='lost') THEN 1 ELSE 0 END) ) as lostCount
                - SUM( (CASE WHEN (s.name='in_progress') THEN 1 ELSE 0 END) ) as inProgressCount
                - COUNT(o.id) as total_ops
            join:
                left:
                    - { join: o.account, alias: a }
                    - { join: o.status, alias: s }
                    - { join: o.closeReason, alias: cr }
            groupBy:  "a.id"

    leads:
        by_date:
            name:      "Number Leads by date"
            select:
                - COUNT(l.id) as leadsCount
                - SUBSTRING(l.createdAt, 1, 10) as createdDate
            from:
                - { table: OroCRMSalesBundle:Lead, alias: l }

            groupBy: createdDate

    opportunities:
        won_by_period:
            name: "Won opportunities by date period"
            from:
                - { table: OroCRMSalesBundle:Opportunity, alias: o }
            select:
                - 1 as period
                - CONCAT( CONCAT( SUBSTRING( o.closeDate, 6, 2 ), '/'), SUBSTRING( o.closeDate, 1, 4 ) ) as monthPeriod
                - >
                  CONCAT(
                    CONCAT(
                      CASE
                        WHEN SUBSTRING(o.closeDate, 6, 2) BETWEEN 1 AND 3 THEN 1
                        WHEN SUBSTRING(o.closeDate, 6, 2) BETWEEN 4 AND 6 THEN 2
                        WHEN SUBSTRING(o.closeDate, 6, 2) BETWEEN 7 AND 9 THEN 3
                        ELSE 4
                      END, '/'
                    ), SUBSTRING( o.closeDate, 1, 4 )
                  ) as quarterPeriod
                - SUBSTRING( o.closeDate, 1, 4 ) as yearPeriod
                - SUM( o.closeRevenue ) as value
                - COUNT( o.id ) as cnt
            join:
                left:
                    - { join: o.status, alias: s }
            where:
                and:
                    - s.name = 'won'
                    - o.closeDate IS NOT NULL
            # group will be changed dynamically dependent on filter
            groupBy: monthPeriod
